// Code generated by protoc-gen-go-grpc-mock. DO NOT EDIT.
// source: tzf/v1/api.proto

package v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTZFServiceClient is a mock of TZFServiceClient interface.
type MockTZFServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTZFServiceClientMockRecorder
}

// MockTZFServiceClientMockRecorder is the mock recorder for MockTZFServiceClient.
type MockTZFServiceClientMockRecorder struct {
	mock *MockTZFServiceClient
}

// NewMockTZFServiceClient creates a new mock instance.
func NewMockTZFServiceClient(ctrl *gomock.Controller) *MockTZFServiceClient {
	mock := &MockTZFServiceClient{ctrl: ctrl}
	mock.recorder = &MockTZFServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTZFServiceClient) EXPECT() *MockTZFServiceClientMockRecorder {
	return m.recorder
}

// GetAllTimezones mocks base method.
func (m *MockTZFServiceClient) GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest, opts ...grpc.CallOption) (*GetAllTimezonesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTimezones", varargs...)
	ret0, _ := ret[0].(*GetAllTimezonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTimezones indicates an expected call of GetAllTimezones.
func (mr *MockTZFServiceClientMockRecorder) GetAllTimezones(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTimezones", reflect.TypeOf((*MockTZFServiceClient)(nil).GetAllTimezones), varargs...)
}

// GetTimezone mocks base method.
func (m *MockTZFServiceClient) GetTimezone(ctx context.Context, in *GetTimezoneRequest, opts ...grpc.CallOption) (*GetTimezoneResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimezone", varargs...)
	ret0, _ := ret[0].(*GetTimezoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezone indicates an expected call of GetTimezone.
func (mr *MockTZFServiceClientMockRecorder) GetTimezone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezone", reflect.TypeOf((*MockTZFServiceClient)(nil).GetTimezone), varargs...)
}

// GetTimezones mocks base method.
func (m *MockTZFServiceClient) GetTimezones(ctx context.Context, in *GetTimezonesRequest, opts ...grpc.CallOption) (*GetTimezonesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimezones", varargs...)
	ret0, _ := ret[0].(*GetTimezonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezones indicates an expected call of GetTimezones.
func (mr *MockTZFServiceClientMockRecorder) GetTimezones(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezones", reflect.TypeOf((*MockTZFServiceClient)(nil).GetTimezones), varargs...)
}

// Ping mocks base method.
func (m *MockTZFServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockTZFServiceClientMockRecorder) Ping(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockTZFServiceClient)(nil).Ping), varargs...)
}

// MockTZFServiceServer is a mock of TZFServiceServer interface.
type MockTZFServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTZFServiceServerMockRecorder
}

// MockTZFServiceServerMockRecorder is the mock recorder for MockTZFServiceServer.
type MockTZFServiceServerMockRecorder struct {
	mock *MockTZFServiceServer
}

// NewMockTZFServiceServer creates a new mock instance.
func NewMockTZFServiceServer(ctrl *gomock.Controller) *MockTZFServiceServer {
	mock := &MockTZFServiceServer{ctrl: ctrl}
	mock.recorder = &MockTZFServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTZFServiceServer) EXPECT() *MockTZFServiceServerMockRecorder {
	return m.recorder
}

// GetAllTimezones mocks base method.
func (m *MockTZFServiceServer) GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTimezones", ctx, in)
	ret0, _ := ret[0].(*GetAllTimezonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTimezones indicates an expected call of GetAllTimezones.
func (mr *MockTZFServiceServerMockRecorder) GetAllTimezones(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTimezones", reflect.TypeOf((*MockTZFServiceServer)(nil).GetAllTimezones), ctx, in)
}

// GetTimezone mocks base method.
func (m *MockTZFServiceServer) GetTimezone(ctx context.Context, in *GetTimezoneRequest) (*GetTimezoneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezone", ctx, in)
	ret0, _ := ret[0].(*GetTimezoneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezone indicates an expected call of GetTimezone.
func (mr *MockTZFServiceServerMockRecorder) GetTimezone(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezone", reflect.TypeOf((*MockTZFServiceServer)(nil).GetTimezone), ctx, in)
}

// GetTimezones mocks base method.
func (m *MockTZFServiceServer) GetTimezones(ctx context.Context, in *GetTimezonesRequest) (*GetTimezonesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezones", ctx, in)
	ret0, _ := ret[0].(*GetTimezonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezones indicates an expected call of GetTimezones.
func (mr *MockTZFServiceServerMockRecorder) GetTimezones(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezones", reflect.TypeOf((*MockTZFServiceServer)(nil).GetTimezones), ctx, in)
}

// Ping mocks base method.
func (m *MockTZFServiceServer) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx, in)
	ret0, _ := ret[0].(*PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockTZFServiceServerMockRecorder) Ping(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockTZFServiceServer)(nil).Ping), ctx, in)
}

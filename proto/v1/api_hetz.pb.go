// Code generated by github.com/ringsaturn/protoc-gen-go-hertz. DO NOT EDIT.

package v1

import (
	context "context"
	app "github.com/cloudwego/hertz/pkg/app"
	server "github.com/cloudwego/hertz/pkg/app/server"
	xhertz "github.com/ringsaturn/protoc-gen-go-hertz/xhertz"
	http "net/http"
)

// context.context.
// http.http.

// app.app.
// server.server.
// xhertz.xhertz.

type TZFServiceHTTPServer interface {
	GetAllTimezones(context.Context, *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error)

	GetTimezone(context.Context, *GetTimezoneRequest) (*GetTimezoneResponse, error)

	GetTimezones(context.Context, *GetTimezonesRequest) (*GetTimezonesResponse, error)
}

func RegisterTZFServiceHTTPServer(h *server.Hertz, srv TZFServiceHTTPServer) {
	s := TZFService{
		server: srv,
		h:      h,
	}
	s.RegisterService()
}

type TZFService struct {
	server TZFServiceHTTPServer
	h      *server.Hertz
}

func (s *TZFService) GetTimezone_0(c context.Context, ctx *app.RequestContext) {
	var in GetTimezoneRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		xhertz.HandleBadRequest(ctx, err)
		return
	}
	out, err := s.server.(TZFServiceHTTPServer).GetTimezone(c, &in)
	if err != nil {
		xhertz.HandleError(ctx, err)
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *TZFService) GetTimezones_0(c context.Context, ctx *app.RequestContext) {
	var in GetTimezonesRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		xhertz.HandleBadRequest(ctx, err)
		return
	}
	out, err := s.server.(TZFServiceHTTPServer).GetTimezones(c, &in)
	if err != nil {
		xhertz.HandleError(ctx, err)
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *TZFService) GetAllTimezones_0(c context.Context, ctx *app.RequestContext) {
	var in GetAllTimezonesRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		xhertz.HandleBadRequest(ctx, err)
		return
	}
	out, err := s.server.(TZFServiceHTTPServer).GetAllTimezones(c, &in)
	if err != nil {
		xhertz.HandleError(ctx, err)
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *TZFService) RegisterService() {

	s.h.Handle("GET", "/api/v1/tz", s.GetTimezone_0)

	s.h.Handle("GET", "/api/v1/tzs", s.GetTimezones_0)

	s.h.Handle("GET", "/api/v1/tzs/all", s.GetAllTimezones_0)

}

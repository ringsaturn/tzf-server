// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TZFService_GetTimezone_FullMethodName     = "/proto.v1.TZFService/GetTimezone"
	TZFService_GetTimezones_FullMethodName    = "/proto.v1.TZFService/GetTimezones"
	TZFService_GetAllTimezones_FullMethodName = "/proto.v1.TZFService/GetAllTimezones"
)

// TZFServiceClient is the client API for TZFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TZFServiceClient interface {
	GetTimezone(ctx context.Context, in *GetTimezoneRequest, opts ...grpc.CallOption) (*GetTimezoneResponse, error)
	GetTimezones(ctx context.Context, in *GetTimezonesRequest, opts ...grpc.CallOption) (*GetTimezonesResponse, error)
	GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest, opts ...grpc.CallOption) (*GetAllTimezonesResponse, error)
}

type tZFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTZFServiceClient(cc grpc.ClientConnInterface) TZFServiceClient {
	return &tZFServiceClient{cc}
}

func (c *tZFServiceClient) GetTimezone(ctx context.Context, in *GetTimezoneRequest, opts ...grpc.CallOption) (*GetTimezoneResponse, error) {
	out := new(GetTimezoneResponse)
	err := c.cc.Invoke(ctx, TZFService_GetTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tZFServiceClient) GetTimezones(ctx context.Context, in *GetTimezonesRequest, opts ...grpc.CallOption) (*GetTimezonesResponse, error) {
	out := new(GetTimezonesResponse)
	err := c.cc.Invoke(ctx, TZFService_GetTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tZFServiceClient) GetAllTimezones(ctx context.Context, in *GetAllTimezonesRequest, opts ...grpc.CallOption) (*GetAllTimezonesResponse, error) {
	out := new(GetAllTimezonesResponse)
	err := c.cc.Invoke(ctx, TZFService_GetAllTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TZFServiceServer is the server API for TZFService service.
// All implementations must embed UnimplementedTZFServiceServer
// for forward compatibility
type TZFServiceServer interface {
	GetTimezone(context.Context, *GetTimezoneRequest) (*GetTimezoneResponse, error)
	GetTimezones(context.Context, *GetTimezonesRequest) (*GetTimezonesResponse, error)
	GetAllTimezones(context.Context, *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error)
	mustEmbedUnimplementedTZFServiceServer()
}

// UnimplementedTZFServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTZFServiceServer struct {
}

func (UnimplementedTZFServiceServer) GetTimezone(context.Context, *GetTimezoneRequest) (*GetTimezoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezone not implemented")
}
func (UnimplementedTZFServiceServer) GetTimezones(context.Context, *GetTimezonesRequest) (*GetTimezonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimezones not implemented")
}
func (UnimplementedTZFServiceServer) GetAllTimezones(context.Context, *GetAllTimezonesRequest) (*GetAllTimezonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTimezones not implemented")
}
func (UnimplementedTZFServiceServer) mustEmbedUnimplementedTZFServiceServer() {}

// UnsafeTZFServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TZFServiceServer will
// result in compilation errors.
type UnsafeTZFServiceServer interface {
	mustEmbedUnimplementedTZFServiceServer()
}

func RegisterTZFServiceServer(s grpc.ServiceRegistrar, srv TZFServiceServer) {
	s.RegisterService(&TZFService_ServiceDesc, srv)
}

func _TZFService_GetTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TZFServiceServer).GetTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TZFService_GetTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TZFServiceServer).GetTimezone(ctx, req.(*GetTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TZFService_GetTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TZFServiceServer).GetTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TZFService_GetTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TZFServiceServer).GetTimezones(ctx, req.(*GetTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TZFService_GetAllTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TZFServiceServer).GetAllTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TZFService_GetAllTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TZFServiceServer).GetAllTimezones(ctx, req.(*GetAllTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TZFService_ServiceDesc is the grpc.ServiceDesc for TZFService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TZFService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.TZFService",
	HandlerType: (*TZFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimezone",
			Handler:    _TZFService_GetTimezone_Handler,
		},
		{
			MethodName: "GetTimezones",
			Handler:    _TZFService_GetTimezones_Handler,
		},
		{
			MethodName: "GetAllTimezones",
			Handler:    _TZFService_GetAllTimezones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/api.proto",
}

syntax = "proto3";

option go_package = "github.com/ringsaturn/tzf-server/proto/v1;v1";

package proto.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";

// Simple server convert longitude&latitude to timezone name
service TZFService {
  option (google.api.default_host) = "0.0.0.0:8080";

  rpc GetTimezone(GetTimezoneRequest) returns (GetTimezoneResponse) {
    option (google.api.http) = {
      get: "/api/v1/tz"
    };
  }

  rpc GetTimezones(GetTimezonesRequest) returns (GetTimezonesResponse) {
    option (google.api.http) = {
      get: "/api/v1/tzs"
    };
  }

  rpc GetAllTimezones(GetAllTimezonesRequest) returns (GetAllTimezonesResponse) {
    option (google.api.http) = {
      get: "/api/v1/tzs/all"
    };
  }
}

message GetTimezoneRequest {
  // @gotags: query:"longitude" vd:"$>=-180 && $<=180"
  double longitude = 1 [(google.api.field_behavior) = REQUIRED];

  // @gotags: query:"latitude" vd:"$>=-90 && $<=90"
  double latitude = 2 [(google.api.field_behavior) = REQUIRED];
};

message GetTimezonesRequest {
  // @gotags: query:"longitude" vd:"$>=-180 && $<=180"
  double longitude = 1 [(google.api.field_behavior) = REQUIRED];

  // @gotags: query:"latitude" vd:"$>=-90 && $<=90"
  double latitude = 2 [(google.api.field_behavior) = REQUIRED];
};

message GetTimezoneResponse {
  string timezone                 = 1;
  string abbreviation             = 2;
  google.protobuf.Duration offset = 3;
}

message GetTimezonesResponse {
  repeated GetTimezoneResponse timezones = 1;
}

message GetAllTimezonesRequest {}

message GetAllTimezonesResponse {
  repeated GetTimezoneResponse timezones = 1;
}

// Code generated by gtag. DO NOT EDIT.
// See: https://github.com/wolfogre/gtag

//go:generate go run github.com/wolfogre/gtag/cmd/gtag -types Config -tags flag .
package config

import (
	"reflect"
	"strings"
)

var (
	valueOfConfig = Config{}
	typeOfConfig  = reflect.TypeOf(valueOfConfig)

	_                          = valueOfConfig.FinderType
	fieldOfConfigFinderType, _ = typeOfConfig.FieldByName("FinderType")
	tagOfConfigFinderType      = fieldOfConfigFinderType.Tag

	_                        = valueOfConfig.DataPath
	fieldOfConfigDataPath, _ = typeOfConfig.FieldByName("DataPath")
	tagOfConfigDataPath      = fieldOfConfigDataPath.Tag

	_                        = valueOfConfig.HTTPAddr
	fieldOfConfigHTTPAddr, _ = typeOfConfig.FieldByName("HTTPAddr")
	tagOfConfigHTTPAddr      = fieldOfConfigHTTPAddr.Tag

	_                         = valueOfConfig.RedisAddr
	fieldOfConfigRedisAddr, _ = typeOfConfig.FieldByName("RedisAddr")
	tagOfConfigRedisAddr      = fieldOfConfigRedisAddr.Tag

	_                                   = valueOfConfig.PrometheusHostPorts
	fieldOfConfigPrometheusHostPorts, _ = typeOfConfig.FieldByName("PrometheusHostPorts")
	tagOfConfigPrometheusHostPorts      = fieldOfConfigPrometheusHostPorts.Tag

	_                              = valueOfConfig.PrometheusPath
	fieldOfConfigPrometheusPath, _ = typeOfConfig.FieldByName("PrometheusPath")
	tagOfConfigPrometheusPath      = fieldOfConfigPrometheusPath.Tag

	_                                        = valueOfConfig.HertzPrometheusHostPorts
	fieldOfConfigHertzPrometheusHostPorts, _ = typeOfConfig.FieldByName("HertzPrometheusHostPorts")
	tagOfConfigHertzPrometheusHostPorts      = fieldOfConfigHertzPrometheusHostPorts.Tag

	_                                   = valueOfConfig.HertzPrometheusPath
	fieldOfConfigHertzPrometheusPath, _ = typeOfConfig.FieldByName("HertzPrometheusPath")
	tagOfConfigHertzPrometheusPath      = fieldOfConfigHertzPrometheusPath.Tag

	_                                           = valueOfConfig.PrometheusEnableGoCollector
	fieldOfConfigPrometheusEnableGoCollector, _ = typeOfConfig.FieldByName("PrometheusEnableGoCollector")
	tagOfConfigPrometheusEnableGoCollector      = fieldOfConfigPrometheusEnableGoCollector.Tag

	_                                 = valueOfConfig.DisablePrintRoute
	fieldOfConfigDisablePrintRoute, _ = typeOfConfig.FieldByName("DisablePrintRoute")
	tagOfConfigDisablePrintRoute      = fieldOfConfigDisablePrintRoute.Tag
)

// ConfigTags indicate tags of type Config
type ConfigTags struct {
	FinderType                  string // `flag:"type"`
	DataPath                    string // `flag:"path"`
	HTTPAddr                    string // `flag:"http-addr"`
	RedisAddr                   string // `flag:"redis-addr"`
	PrometheusHostPorts         string // `flag:"prometheus-host-port"`
	PrometheusPath              string // `flag:"prometheus-path"`
	HertzPrometheusHostPorts    string // `flag:"hertz-prometheus-host-port"`
	HertzPrometheusPath         string // `flag:"hertz-prometheus-path"`
	PrometheusEnableGoCollector string // `flag:"prometheus-enable-go-coll"`
	DisablePrintRoute           string // `flag:"disable-print-route"`
}

// Values return all tags of Config as slice
func (t *ConfigTags) Values() []string {
	return []string{
		t.FinderType,
		t.DataPath,
		t.HTTPAddr,
		t.RedisAddr,
		t.PrometheusHostPorts,
		t.PrometheusPath,
		t.HertzPrometheusHostPorts,
		t.HertzPrometheusPath,
		t.PrometheusEnableGoCollector,
		t.DisablePrintRoute,
	}
}

// Tags return specified tags of Config
func (*Config) Tags(tag string, convert ...func(string) string) ConfigTags {
	conv := func(in string) string { return strings.TrimSpace(strings.Split(in, ",")[0]) }
	if len(convert) > 0 {
		conv = convert[0]
	}
	if conv == nil {
		conv = func(in string) string { return in }
	}
	return ConfigTags{
		FinderType:                  conv(tagOfConfigFinderType.Get(tag)),
		DataPath:                    conv(tagOfConfigDataPath.Get(tag)),
		HTTPAddr:                    conv(tagOfConfigHTTPAddr.Get(tag)),
		RedisAddr:                   conv(tagOfConfigRedisAddr.Get(tag)),
		PrometheusHostPorts:         conv(tagOfConfigPrometheusHostPorts.Get(tag)),
		PrometheusPath:              conv(tagOfConfigPrometheusPath.Get(tag)),
		HertzPrometheusHostPorts:    conv(tagOfConfigHertzPrometheusHostPorts.Get(tag)),
		HertzPrometheusPath:         conv(tagOfConfigHertzPrometheusPath.Get(tag)),
		PrometheusEnableGoCollector: conv(tagOfConfigPrometheusEnableGoCollector.Get(tag)),
		DisablePrintRoute:           conv(tagOfConfigDisablePrintRoute.Get(tag)),
	}
}

// TagsFlag is alias of Tags("flag")
func (*Config) TagsFlag() ConfigTags {
	var v *Config
	return v.Tags("flag")
}
